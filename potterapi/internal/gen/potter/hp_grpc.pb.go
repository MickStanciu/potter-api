// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: potter/hp.proto

package potter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HogwartsServiceClient is the client API for HogwartsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HogwartsServiceClient interface {
	GetTheGoodGuys(ctx context.Context, in *GoodGuysRequest, opts ...grpc.CallOption) (*GoodGuysResponse, error)
	GetTheBadGuys(ctx context.Context, in *BadGuysRequest, opts ...grpc.CallOption) (*BadGuysResponse, error)
}

type hogwartsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHogwartsServiceClient(cc grpc.ClientConnInterface) HogwartsServiceClient {
	return &hogwartsServiceClient{cc}
}

func (c *hogwartsServiceClient) GetTheGoodGuys(ctx context.Context, in *GoodGuysRequest, opts ...grpc.CallOption) (*GoodGuysResponse, error) {
	out := new(GoodGuysResponse)
	err := c.cc.Invoke(ctx, "/potter.HogwartsService/GetTheGoodGuys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hogwartsServiceClient) GetTheBadGuys(ctx context.Context, in *BadGuysRequest, opts ...grpc.CallOption) (*BadGuysResponse, error) {
	out := new(BadGuysResponse)
	err := c.cc.Invoke(ctx, "/potter.HogwartsService/GetTheBadGuys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HogwartsServiceServer is the server API for HogwartsService service.
// All implementations must embed UnimplementedHogwartsServiceServer
// for forward compatibility
type HogwartsServiceServer interface {
	GetTheGoodGuys(context.Context, *GoodGuysRequest) (*GoodGuysResponse, error)
	GetTheBadGuys(context.Context, *BadGuysRequest) (*BadGuysResponse, error)
	mustEmbedUnimplementedHogwartsServiceServer()
}

// UnimplementedHogwartsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHogwartsServiceServer struct {
}

func (UnimplementedHogwartsServiceServer) GetTheGoodGuys(context.Context, *GoodGuysRequest) (*GoodGuysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheGoodGuys not implemented")
}
func (UnimplementedHogwartsServiceServer) GetTheBadGuys(context.Context, *BadGuysRequest) (*BadGuysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheBadGuys not implemented")
}
func (UnimplementedHogwartsServiceServer) mustEmbedUnimplementedHogwartsServiceServer() {}

// UnsafeHogwartsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HogwartsServiceServer will
// result in compilation errors.
type UnsafeHogwartsServiceServer interface {
	mustEmbedUnimplementedHogwartsServiceServer()
}

func RegisterHogwartsServiceServer(s grpc.ServiceRegistrar, srv HogwartsServiceServer) {
	s.RegisterService(&HogwartsService_ServiceDesc, srv)
}

func _HogwartsService_GetTheGoodGuys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodGuysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HogwartsServiceServer).GetTheGoodGuys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/potter.HogwartsService/GetTheGoodGuys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HogwartsServiceServer).GetTheGoodGuys(ctx, req.(*GoodGuysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HogwartsService_GetTheBadGuys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BadGuysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HogwartsServiceServer).GetTheBadGuys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/potter.HogwartsService/GetTheBadGuys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HogwartsServiceServer).GetTheBadGuys(ctx, req.(*BadGuysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HogwartsService_ServiceDesc is the grpc.ServiceDesc for HogwartsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HogwartsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "potter.HogwartsService",
	HandlerType: (*HogwartsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTheGoodGuys",
			Handler:    _HogwartsService_GetTheGoodGuys_Handler,
		},
		{
			MethodName: "GetTheBadGuys",
			Handler:    _HogwartsService_GetTheBadGuys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "potter/hp.proto",
}
